/**
 * ÈÉ®ÁΩ≤ DataMarketplaceFHE ÂêàÁ∫¶ËÑöÊú¨
 * Áî®‰∫éÈÉ®ÁΩ≤ÁúüÊ≠£ÁöÑ FHE ÁâàÊú¨Âà∞ Zama ÁΩëÁªú
 */

const hre = require("hardhat");
const fs = require("fs");
const path = require("path");

async function main() {
  console.log("\nüöÄ ÂºÄÂßãÈÉ®ÁΩ≤ DataMarketplaceFHE ÂêàÁ∫¶...\n");
  
  // Ëé∑ÂèñÁΩëÁªú‰ø°ÊÅØ
  const network = hre.network.name;
  const chainId = hre.network.config.chainId;
  console.log(`üì° ÈÉ®ÁΩ≤ÁΩëÁªú: ${network} (Chain ID: ${chainId})`);
  
  // ‚ö†Ô∏è Ê£ÄÊü•ÊòØÂê¶‰∏∫ÊîØÊåÅ FHEVM ÁöÑÁΩëÁªú
  const FHEVM_NETWORKS = ['sepolia', 'zamaDevnet', 'zamaLocal'];
  
  if (!FHEVM_NETWORKS.includes(network)) {
    console.warn('\n‚ö†Ô∏è  Ë≠¶ÂëäÔºöÂΩìÂâçÁΩëÁªú‰∏çÊîØÊåÅ FHEVMÔºÅ');
    console.warn('   DataMarketplaceFHE ÂêàÁ∫¶ÈúÄË¶Å FHEVM ÊîØÊåÅ„ÄÇ');
    console.warn('   ÊîØÊåÅÁöÑÁΩëÁªúÔºö');
    console.warn('     - sepolia (‚úÖ Êé®ËçêÔºå‰ΩøÁî® SepoliaZamaFHEVMConfig)');
    console.warn('     - zamaDevnet (‚è≥ Êú™Êù•)');
    console.warn('     - zamaLocal (Êú¨Âú∞ÊµãËØï)');
    console.warn('   Êé®Ëçê‰ΩøÁî®: npx hardhat run scripts/deploy-fhe.js --network sepolia\n');
    process.exit(1);
  }
  
  console.log(`‚úÖ ÁõÆÊ†áÁΩëÁªúÊîØÊåÅ FHEVM`);
  if (network === 'sepolia') {
    console.log('   üìç ‰ΩøÁî® SepoliaZamaFHEVMConfig (Zama ÂÆòÊñπ FHEVM Âü∫Á°ÄËÆæÊñΩ)');
    console.log('   üåê Gateway: https://gateway.sepolia.zama.ai');
  }
  
  // ‰øùÁïôÂéüÊúâÁöÑ‰∫§‰∫íÈÄªËæëÔºàÂ¶ÇÊûúÈúÄË¶ÅÁöÑËØùÔºâ
  if (false) { // Á¶ÅÁî®‰∫§‰∫íÊèêÁ§∫
    const readline = require('readline').createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    const answer = await new Promise(resolve => {
      readline.question('ÊòØÂê¶ÁªßÁª≠ÈÉ®ÁΩ≤Ôºü (yes/no): ', resolve);
    });
    readline.close();
    
    if (answer.toLowerCase() !== 'yes') {
      console.log('‚ùå ÈÉ®ÁΩ≤Â∑≤ÂèñÊ∂à');
      process.exit(0);
    }
  }
  
  // Ëé∑ÂèñÈÉ®ÁΩ≤Ë¥¶Êà∑
  const [deployer] = await hre.ethers.getSigners();
  console.log(`üë§ ÈÉ®ÁΩ≤Ë¥¶Êà∑: ${deployer.address}`);
  
  // Ê£ÄÊü•Ë¥¶Êà∑‰ΩôÈ¢ù
  const balance = await hre.ethers.provider.getBalance(deployer.address);
  console.log(`üí∞ Ë¥¶Êà∑‰ΩôÈ¢ù: ${hre.ethers.formatEther(balance)} ETH`);
  
  if (balance === 0n) {
    console.error('\n‚ùå ÈîôËØØÔºöË¥¶Êà∑‰ΩôÈ¢ù‰∏∫ 0ÔºåËØ∑ÂÖàÂÖÖÂÄºÔºÅ');
    console.log('   Zama Devnet Ê∞¥ÈæôÂ§¥: https://faucet.zama.ai');
    process.exit(1);
  }
  
  console.log('\nüìù ÂºÄÂßãÁºñËØëÂêàÁ∫¶...');
  
  // ÁºñËØëÂêàÁ∫¶
  await hre.run('compile');
  
  console.log('\nüîß ÂáÜÂ§áÈÉ®ÁΩ≤ DataMarketplaceFHE...');
  
  // ÈÉ®ÁΩ≤ÂêàÁ∫¶
  const DataMarketplaceFHE = await hre.ethers.getContractFactory("DataMarketplaceFHE");
  
  console.log('‚è≥ ÈÉ®ÁΩ≤‰∏≠ÔºàËøôÂèØËÉΩÈúÄË¶ÅÂá†ÂàÜÈíüÔºåFHE ÂêàÁ∫¶ËæÉÂ§ßÔºâ...');
  
  const startTime = Date.now();
  const marketplace = await DataMarketplaceFHE.deploy();
  
  // Á≠âÂæÖÈÉ®ÁΩ≤Á°ÆËÆ§
  await marketplace.waitForDeployment();
  
  const deployTime = ((Date.now() - startTime) / 1000).toFixed(2);
  const address = await marketplace.getAddress();
  
  console.log('\n‚úÖ DataMarketplaceFHE ÈÉ®ÁΩ≤ÊàêÂäüÔºÅ\n');
  console.log(`üìç ÂêàÁ∫¶Âú∞ÂùÄ: ${address}`);
  console.log(`‚è±Ô∏è  ÈÉ®ÁΩ≤ËÄóÊó∂: ${deployTime} Áßí`);
  console.log(`üîó Âå∫ÂùóÈìæÊµèËßàÂô®: https://explorer.zama.ai/address/${address}`);
  
  // È™åËØÅÂêàÁ∫¶ÈÉ®ÁΩ≤
  console.log('\nüîç È™åËØÅÂêàÁ∫¶...');
  try {
    const datasetCount = await marketplace.getDatasetCount();
    const queryCount = await marketplace.getQueryCount();
    const platformFee = await marketplace.PLATFORM_FEE_PERCENT();
    
    console.log(`   ‚úÖ Dataset Count: ${datasetCount}`);
    console.log(`   ‚úÖ Query Count: ${queryCount}`);
    console.log(`   ‚úÖ Platform Fee: ${platformFee}%`);
  } catch (error) {
    console.log(`   ‚ö†Ô∏è  Êó†Ê≥ïÈ™åËØÅÂêàÁ∫¶: ${error.message}`);
  }
  
  // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
  const deployment = {
    network: network,
    chainId: chainId,
    contractName: "DataMarketplaceFHE",
    address: address,
    deployer: deployer.address,
    deployTime: new Date().toISOString(),
    deployDuration: deployTime,
    txHash: marketplace.deploymentTransaction().hash,
    blockNumber: (await hre.ethers.provider.getBlockNumber()).toString(),
    fhevmEnabled: true,
    gatewayIntegrated: true
  };
  
  // ‰øùÂ≠òÂà∞Êñá‰ª∂
  const deploymentsDir = path.join(__dirname, '../deployments');
  if (!fs.existsSync(deploymentsDir)) {
    fs.mkdirSync(deploymentsDir, { recursive: true });
  }
  
  const filename = `fhe-${network}-${chainId}.json`;
  const filepath = path.join(deploymentsDir, filename);
  fs.writeFileSync(filepath, JSON.stringify(deployment, null, 2));
  
  console.log(`\nüíæ ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠òÂà∞: ${filepath}`);
  
  // ÁîüÊàêÂâçÁ´ØÈÖçÁΩÆ
  console.log('\nüìù ÁîüÊàêÂâçÁ´ØÈÖçÁΩÆ...');
  
  const frontendConfig = `// FHEVM Ê®°ÂºèÈÖçÁΩÆ
export const FHE_CONTRACT_ADDRESS = "${address}";
export const FHE_NETWORK = "${network}";
export const FHE_CHAIN_ID = ${chainId};
export const FHEVM_ENABLED = true;

// ÊõøÊç¢ frontend/src/config.js ‰∏≠ÁöÑ CONTRACT_ADDRESS
`;
  
  const configPath = path.join(__dirname, '../frontend-fhe-config.txt');
  fs.writeFileSync(configPath, frontendConfig);
  
  console.log(`   üíæ Â∑≤ÁîüÊàê: ${configPath}`);
  
  // ‰∏ã‰∏ÄÊ≠•ËØ¥Êòé
  console.log('\nüìã ‰∏ã‰∏ÄÊ≠•Êìç‰ΩúÔºö\n');
  console.log('1. Êõ¥Êñ∞ÂâçÁ´ØÈÖçÁΩÆÔºö');
  console.log(`   cd frontend && npm install @zama-fhe/relayer-sdk`);
  console.log('');
  console.log('2. ‰øÆÊîπ frontend/src/config.jsÔºö');
  console.log(`   export const CONTRACT_ADDRESS = "${address}";`);
  console.log(`   export const FHEVM_ENABLED = true;`);
  console.log('');
  console.log('3. ÊµãËØïÂêàÁ∫¶Ôºö');
  console.log(`   npx hardhat run scripts/test-fhe-contract.js --network ${network}`);
  console.log('');
  console.log('4. ÂêØÂä®ÂâçÁ´ØÔºö');
  console.log('   cd frontend && npm run dev');
  console.log('');
  
  // ‰øùÂ≠ò‰∏ã‰∏ÄÊ≠•ËØ¥Êòé
  const nextStepsPath = path.join(__dirname, '../NEXT_STEPS_FHE.md');
  const nextStepsContent = `# FHE ÂêàÁ∫¶ÈÉ®ÁΩ≤ÊàêÂäü - ‰∏ã‰∏ÄÊ≠•Êìç‰Ωú

## ‚úÖ Â∑≤ÂÆåÊàê

- ‚úÖ DataMarketplaceFHE ÂêàÁ∫¶Â∑≤ÈÉ®ÁΩ≤
- ‚úÖ Âú∞ÂùÄ: \`${address}\`
- ‚úÖ ÁΩëÁªú: ${network} (Chain ID: ${chainId})
- ‚úÖ ÈÉ®ÁΩ≤Êó∂Èó¥: ${deployment.deployTime}

## üìã ‰∏ã‰∏ÄÊ≠•ÔºàÊåâÈ°∫Â∫èÊâßË°åÔºâ

### Step 1: ÂÆâË£ÖÂâçÁ´Ø SDK

\`\`\`bash
cd frontend
npm install @zama-fhe/relayer-sdk --save
\`\`\`

### Step 2: Êõ¥Êñ∞ÂâçÁ´ØÈÖçÁΩÆ

ÁºñËæë \`frontend/src/config.js\`Ôºö

\`\`\`javascript
// ÂàáÊç¢Âà∞ FHE Ê®°Âºè
export const CONTRACT_ADDRESS = "${address}";
export const FHEVM_ENABLED = true;
export const NETWORK_NAME = "${network}";
export const CHAIN_ID = ${chainId};
\`\`\`

### Step 3: Êõ¥Êñ∞ useContract Hook

‰øÆÊîπ \`frontend/src/hooks/useContract.js\` ‰ª•‰ΩøÁî®ÁúüÊ≠£ÁöÑ FHEVM SDK„ÄÇ

### Step 4: ÊµãËØïÂêàÁ∫¶ÂäüËÉΩ

\`\`\`bash
# Âú®È°πÁõÆÊ†πÁõÆÂΩïËøêË°å
npx hardhat run scripts/test-fhe-contract.js --network ${network}
\`\`\`

### Step 5: ÂêØÂä®ÂâçÁ´ØÊµãËØï

\`\`\`bash
cd frontend
npm run dev
\`\`\`

### Step 6: Á´ØÂà∞Á´ØÊµãËØï

1. ËøûÊé•Èí±ÂåÖÂà∞ Zama Devnet
2. ‰∏ä‰º†ÊµãËØïÊï∞ÊçÆÈõÜÔºà‰ΩøÁî® FHE Âä†ÂØÜÔºâ
3. ÊâßË°åÊü•ËØ¢Âπ∂Á≠âÂæÖ Gateway Ëß£ÂØÜ
4. È™åËØÅÁªìÊûúÊòæÁ§∫

## üîó ÊúâÁî®ÁöÑÈìæÊé•

- ÂêàÁ∫¶Âú∞ÂùÄ: https://explorer.zama.ai/address/${address}
- Zama ÊñáÊ°£: https://docs.zama.ai/fhevm
- Gateway Áä∂ÊÄÅ: https://gateway.zama.ai/status
- Ê∞¥ÈæôÂ§¥: https://faucet.zama.ai

## ‚ö†Ô∏è Ê≥®ÊÑè‰∫ãÈ°π

1. Gateway Ëß£ÂØÜÂèØËÉΩÈúÄË¶Å 30-60 Áßí
2. Á°Æ‰øùË¥¶Êà∑ÊúâË∂≥Â§üÁöÑ Gas
3. FHE ËøêÁÆóÊØîÊôÆÈÄöËøêÁÆóÊ∂àËÄóÊõ¥Â§ö Gas
4. Á¨¨‰∏ÄÊ¨°‰∏ä‰º†Êï∞ÊçÆÂèØËÉΩËæÉÊÖ¢

## üÜò ÈÅáÂà∞ÈóÆÈ¢òÔºü

ÂèÇËÄÉ \`FHEVM_ÂºÄÂèëÊ†áÂáÜ‰∏éËß£ÂÜ≥ÊñπÊ°àÊâãÂÜå.md\` Á¨¨ 8-11 Á´†„ÄÇ
`;
  
  fs.writeFileSync(nextStepsPath, nextStepsContent);
  console.log(`üìÑ ËØ¶ÁªÜËØ¥ÊòéÂ∑≤‰øùÂ≠òÂà∞: ${nextStepsPath}\n`);
  
  console.log('üéâ ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅÂºÄÂßãÂèÇËµõ‰πãÊóÖÂêßÔºÅ\n');
}

// ÊâßË°åÈÉ®ÁΩ≤
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('\n‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:\n');
    console.error(error);
    process.exit(1);
  });

